cmake_minimum_required(VERSION 3.3)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Debug or Release")
endif()
project(std C Fortran)
enable_testing()

get_directory_property(hasParent PARENT_DIRECTORY)
if(NOT hasParent)
  include(${CMAKE_CURRENT_SOURCE_DIR}/../cmake/compilers.cmake)
endif()

include(${CMAKE_CURRENT_SOURCE_DIR}/../cmake/f08block.cmake)

if(f08block)
add_executable(block block.f90)
target_compile_options(block PRIVATE ${FFLAGS})
target_link_libraries(block ${FLIBS})
add_test(NAME Block COMMAND block)
endif()

if(WIN32 AND CMAKE_Fortran_COMPILER_ID STREQUAL PGI)
  message(STATUS "PGI Windows bug")
else()
  add_executable(shortcircuit short_circuit.f90)
  target_compile_options(shortcircuit PRIVATE ${FFLAGS})
  target_link_libraries(shortcircuit ${FLIBS})
  add_test(NAME ShortCircuit COMMAND shortcircuit)
endif()

add_executable(bitpat bitpat.f90)
target_compile_options(bitpat PRIVATE ${FFLAGS})
target_link_libraries(bitpat ${FLIBS})
add_test(NAME BitPattern COMMAND bitpat)


add_executable(justwait pause.f90)
target_compile_options(justwait PRIVATE ${FFLAGS})
target_link_libraries(justwait ${FLIBS})
# NO test

if(WIN32 AND CMAKE_Fortran_COMPILER_ID STREQUAL PGI)
  message(STATUS "PGI Windows bug")
else()
  add_executable(mkdirstd mkdir.f90)
  if(CMAKE_Fortran_COMPILER_ID STREQUAL Intel)
    target_sources(mkdirstd PRIVATE isdir_intel.f90)
  else()
    target_sources(mkdirstd PRIVATE isdir.f90)
  endif()
  target_compile_options(mkdirstd PRIVATE ${FFLAGS})
  target_link_libraries(mkdirstd ${FLIBS})
  set(_dirlist testdir/hello a/b a/b/c/)
  foreach(_dir ${_dirlist})
    file(REMOVE_RECURSE ${_dir})
    add_test(NAME mkdir_${_dir} COMMAND $<TARGET_FILE:mkdirstd> ${_dir})
  endforeach()
endif()

if(NOT WIN32)
add_executable(sleepstd sleep.f90)
target_compile_options(sleepstd PRIVATE ${FFLAGS})
target_link_libraries(sleepstd ${FLIBS})
add_test(NAME FortranMicrosleep COMMAND sleepstd)
set_tests_properties(FortranMicrosleep PROPERTIES TIMEOUT 1)
endif()

add_executable(statement statement_function.f90)
target_compile_options(statement PRIVATE ${FFLAGS})
target_link_libraries(statement ${FLIBS})
add_test(NAME Statement COMMAND statement)

